.container.mt-4
	.col-md-8.mx-auto
		%h1 Personal Info

		= form_with(model: [camp, application, pi]) do |f|
			.row
				.col-md-6.mb-4
					.form-floating.required
						= f.text_field :first_name, placeholder: "First (Preferred) Name (e.g. Jane)", required: true, class: "border border-dark form-control", value: current_user.profile.first_name
						= f.label :first_name, "First (Preferred) Name (e.g. Jane)", aria:{hidden: "true"}
						
				.col-md-6.mb-4
					.form-floating.required
						= f.text_field :last_name, placeholder: "Last Name (e.g. Smith)", required: true, class: "border border-dark form-control", value: current_user.profile.last_name
						= f.label :last_name, "Last Name (e.g. Smith)", aria:{hidden: "true"}

			.fieldset.required.border.border-dark.ps-4.pe-4.pt-4.mb-4
				= render '/shared/check_box_group', f: f, inst: @pi, legend: "What is your gender?", helper_text: "If your gender is not listed, please enter your own in the \"Other Gender\" text field.  You may select more than one gender identity.", this_method: gender_identities, attribute: "gender", cols: "col-6"
				
				- a1 = []
				- if !pi.gender.nil?
					- pi.gender.each do |g|
						- if !gender_identities.include?(g)
							- a1 << g
				- gender_value = a1.join(" ")

				.form-floating.mb-4
					- if a1.empty?
						%input.border.border-dark.form-control{type: "text", name: "camp_application_pi[gender][]", id: "camp_application_pi_gender_other", placeholder: "Other Gender"}
					- else
						%input.border.border-dark.form-control{type: "text", name: "camp_application_pi[gender][]", id: "camp_application_pi_gender_other", placeholder: "Other Gender", value: gender_value}
					%label{for: "camp_application_pi_gender_other"} Other Gender
			
			.fieldset.required.border.border-dark.ps-4.pe-4.pt-4.mb-4
				= render "/shared/check_box_group", f: f, inst: @pi, legend: "What are your pronouns?", helper_text: "If your pronouns are not listed, please indicate in the \"Other Pronouns\" text field.  You may select more than one set of pronouns.", attribute: "pronouns", cols: "col-6 col-md-6", this_method: basic_pronoun_list

				- a2 = []
				- if !pi.pronouns.nil?
					- pi.pronouns.each do |p|
						- if !basic_pronoun_list.include?(p)
							- a2 << p
				- pronoun_value = a2.join(" ")

				.form-floating.mb-4
					- if a2.empty?
						%input.border.border-dark.form-control{type: "text", name: "camp_application_pi[pronouns][]", id: "camp_application_pi_pronoun_other", placeholder: "Other Pronouns"}
					- else
						%input.border.border-dark.form-control{type: "text", name: "camp_application_pi[pronouns][]", id: "camp_application_pi_pronoun_other", placeholder: "Other Pronouns", value: pronoun_value}
					%label{for: "camp_application_pi_pronoun_other"} Other Pronouns
			

			.fieldset.required.border.border-dark.ps-4.pe-4.pt-4.mb-4
				%legend What is your Date of Birth?

				.input-group.mb-4
					= f.date_select :dob, {order: [:month, :day, :year], month_format_string: "%<number>02d %{name}", prompt: true, start_year: (Date.today.year - 18), end_year: (Date.today.year - 110)}, {class: "form-select form-select-lg border border-dark", required: true}
			
			.fieldset.border.border-dark.ps-4.pe-4.pt-4.mb-4
				%legend Primary Address
				
				- if @pi.address.nil?
					= f.fields_for :address, @pi.build_address do |a|
						= render "/admin/addresses/address", a: a, pi: @pi, counties: @counties
				- else
					- a = pi.address
							
					%address
						#{a.address_l1} <br>
						#{a.address_l2} <br>
						#{a.city}, #{a.state_province.code} #{a.zippostal} <br>
						#{a.county.name}, #{a.state_province.country.name} <br>
			
			.fieldset.border.border-dark.ps-4.pe-4.pt-4.mb-4
				%legend Primary Phone
				- if current_user.phone_numbers.count == 0
					= f.fields_for :phone_numbers, pi.phone_numbers.build do |pn|
					
						.form-floating.mb-4
							= pn.text_field :phone_number, maxlength: 16, placeholder: "Phone Number", class: "border border-dark form-control", id: "primaryPhone"
							= pn.label :phone_number, "Phone Number", for: "primaryPhone"

						.row.mb-4
							- phone_service_types.each do |serv_type|
								.col-md-4.d-grid.d-block.mb-2
									= pn.check_box :service_type, { multiple: true, class: "btn-check" }, serv_type, false
									= pn.label :service_type, serv_type, value: serv_type, class: "btn btn-outline-dark btn-lg text-start"
						.d-none
							= pn.hidden_field :user_id, value: current_user.id
							= pn.hidden_field :phone_type, value: "Primary Phone"

				- elsif current_user.phone_numbers.count > 0
					= render 'edit_primary_phone', f: f, camp: camp, application: application, pi: pi
			
			-#.fieldset.border.border-dark.ps-4.pe-4.pt-4.mb-4
			-#	%legend Alternate Phone
			-#	- if current_user.phone_numbers.count == 0
			-#		= f.fields_for :phone_numbers, pi.phone_numbers.build do |pn|
			-#		
			-#			.form-floating.mb-4
			-#				= pn.text_field :phone_number, maxlength: 16, placeholder: "Phone Number", class: "border border-dark form-control", id: "alternatePhone"
			-#				= pn.label :phone_number, "Phone Number", for: "alternatePhone"

			-#			.row.mb-4
			-#				- phone_service_types.each do |serv_type|
			-#					.col-md-4.d-grid.d-block.mb-2
			-#						= pn.check_box :service_type, { multiple: true, class: "btn-check" }, serv_type, false
			-#						= pn.label :service_type, serv_type, value: serv_type, class: "btn btn-outline-dark btn-lg text-start"
			-#			.d-none
			-#				= pn.hidden_field :user_id, value: current_user.id
			-#				= pn.hidden_field :phone_type, value: "Alternate Phone"
			-#	- elsif current_user.phone_numbers.count > 0
			-#		= render "edit_alternate_phone", f: f, camp: camp, application: application, pi: pi

			.row	
				.col-6
					.row.p-2
						= link_to "Go Back", new_camp_camp_application_camp_application_covid_path(@camp, @application), class: "btn btn-secondary btn-lg", role: "button"
				.col-6
					.row.p-2
						= f.submit "Continue", class: "btn btn-primary btn-lg"

:javascript
	const isNumericInput = (event) => {
	const key = event.keyCode;
		return ((key >= 48 && key <= 57) || // Allow number line
		(key >= 96 && key <= 105) // Allow number pad
	);
	};

	const isModifierKey = (event) => {
		const key = event.keyCode;
		return (event.shiftKey === true || key === 35 || key === 36) || // Allow Shift, Home, End
			(key === 8 || key === 9 || key === 13 || key === 46) || // Allow Backspace, Tab, Enter, Delete
			(key > 36 && key < 41) || // Allow left, up, right, down
			(
				(event.ctrlKey === true || event.metaKey === true) &&
				(key === 65 || key === 67 || key === 86 || key === 88 || key === 90)
			)
	};

	const enforceFormat = (event) => {
		if(!isNumericInput(event) && !isModifierKey(event)){
			event.preventDefault();
		}
	};

	const formatToPhone = (event) => {
		if(isModifierKey(event)) {return;}

		const input = event.target.value.replace(/\D/g,'').substring(0,10); // First ten digits of input only
		const areaCode = input.substring(0,3);
		const middle = input.substring(3,6);
		const last = input.substring(6,10);

		if(input.length > 6){event.target.value = `(${areaCode}) ${middle} - ${last}`;}
		else if(input.length > 3){event.target.value = `(${areaCode}) ${middle}`;}
		else if(input.length > 0){event.target.value = `(${areaCode}`;}
	};

	const inputElement1 = document.getElementById('primaryPhone');
	inputElement1.addEventListener('keydown',enforceFormat);
	inputElement1.addEventListener('keyup',formatToPhone);

	const inputElement2 = document.getElementById('alternatePhone');
	inputElement2.addEventListener('keydown',enforceFormat);
	inputElement2.addEventListener('keyup',formatToPhone);

						